<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Users extends Admin_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('secure/Users_model');
		$this->load->model('secure/Group_model');
		$this->load->model('secure/Countries_model');
		
    } 

    /*
     * Listing of grouplist
     */
    function index()
    {
        $this->check_permission();
				
			if($this->session->userdata('group_id') == '4'){
		$data['userslist'] = $this->Users_model->get_all_executivelist();		
			}
			else{
        $data['userslist'] = $this->Users_model->get_all_userslist();
			}
		
		
		
		//var_dump($data['grouplist']); exit;
		
		$this->render_template('secure/users/index', $data);
    }

    /*
     * Adding a new group
     */
    function add()
    {   
        $this->check_permission();
		$data['grouplist'] 		= $this->Group_model->get_all_grouplist();
		$data['countrieslist'] 	= $this->Countries_model->get_all_countrieslist();
		$data['coordinaterlist']		=	$this->Users_model->get_coordinaterlist();
		$this->load->library('form_validation');
		if($this->input->post('group_id') == '5' && $this->session->userdata('group_id') != '4'){
			$this->form_validation->set_rules('parent_id','Coordinator','required');
			$this->form_validation->set_rules('commission','Commission','required');
		}

		$this->form_validation->set_rules('username','Username','required|is_unique[tbl_users.username]');
		$this->form_validation->set_rules('group_id','Group','required');
		$this->form_validation->set_rules('name','Name','required');
		$this->form_validation->set_rules('password','Password','required');
		$this->form_validation->set_rules('email','Email','required');
		$this->form_validation->set_rules('mobile','Mobile','required');
		$this->form_validation->set_rules('date_of_birth','Date of Birth','required');
		$this->form_validation->set_rules('status','Status','required|integer');
		//var_dump($_POST); exit;
		if($this->form_validation->run())     
        {   
				$salt = md5(rand(0000,9999));
				$password= hash("sha256", $this->input->post('password').$salt);
            	$params = array(
				'group_id' => $this->input->post('group_id'),
				'username' => $this->input->post('username'),
				'email' => $this->input->post('email'),
				'mobile' => $this->input->post('mobile'),
				'salt' => $salt,
				'passkey' => $password,
				'status' => $this->input->post('status'),
				'createdby' => $this->session->userdata('id'),
				'createdon' => date_timestamp_get(date_create()),
            );
			if($this->session->userdata('group_id')=='4'){
				$params['parent_id'] = $this->session->userdata('id');
			}
			else{
				
			if($this->input->post('group_id') == '5' && $this->input->post('parent_id') !=''){
			$params['parent_id'] = $this->input->post('parent_id');
			$params['commission'] = $this->input->post('commission');
			}
			}
            $params2 = array(
				'name' => $this->input->post('name'),
				'gender' => $this->input->post('gender'),
				'date_of_birth' => $this->input->post('date_of_birth'),
				'address' => $this->input->post('address'),
				'country_id' => $this->input->post('country_id'),
				'state_id' => $this->input->post('state_id'),
				'city_id' => $this->input->post('city_id'),
				'zipcode' => $this->input->post('zip_code'),
				
            );
			if(!empty($_FILES['profile_photo']))
			{
									$config['upload_path'] = 'uploads/profile/';
									$config['allowed_types'] = '*';
									$config['max_size'] = '0';
									$config['max_filename'] = '255';
									$config['encrypt_name'] = TRUE;
									$file = array();
									$is_file_error = FALSE;
									if (!$is_file_error) {
										$s =  $this->upload->initialize($config);
										if (!$this->upload->do_upload('profile_photo'))
										{
									      echo $this->upload->display_errors();
									      $is_file_error = TRUE;
						                }
									    else
										{
							               $file = $this->upload->data();
						                }
					            }	
							    if (!$is_file_error) {
							    
						
						
					}
							}
            $user_id = $this->Users_model->add_users('tbl_users', $params);
			if($user_id){
				
			$params2['user_id']=$user_id;
			$user_id = $this->Users_model->add_users('tbl_users_details', $params2);
			$this->Users_model->save_file_info($file, array('user_id'=>$insert_id),'tbl_users_details','profile_photo');
			$this->session->set_flashdata('msg', '<div class="alert alert-success">record Added!</div>');
            redirect('secure/users/index');
			}
        }
        else
        {            
            
			$this->render_template('secure/users/add',$data);
        }
    }  

    /*
     * Editing a user
     */
    function edit($id)
    {   
        // check if the group exists before trying to edit it
        $data['user'] = $this->Users_model->get_user('tbl_users.id,tbl_users.username,tbl_users.email,tbl_users.mobile,tbl_users.salt,tbl_users.status,tbl_users.group_id,tbl_users_details.name,tbl_users_details.date_of_birth,tbl_users_details.gender,tbl_users_details.address,tbl_users_details.city_id,tbl_users_details.state_id,tbl_users_details.country_id,tbl_users_details.zipcode,tbl_users_details.profile_photo,tbl_users_details.about_me', $id);
		//var_dump($data['user']); exit;
        $per = $this->check_permission();
		$data['grouplist'] = $this->Group_model->get_all_grouplist();
		$data['coordinaterlist']		=	$this->Users_model->get_coordinaterlist();
		if($per=='Own'){
		if(!$data['user']['createdby']==$this->session->userdata('id')){
			echo '<script> alert("Access Denied! You do not have permission to access this page");</script>';
			echo '<script> window.history.back();</script>';
		}
		}
        if(isset($data['user']['id']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('status','Status','required|integer');
		
			if($this->form_validation->run())     
            {   
                $salt = md5(rand(0000,9999));
				$password= hash("sha256", $this->input->post('password').$salt);
            	$params = array(
				'group_id' => $this->input->post('group_id'),
				'username' => $this->input->post('username'),
				'email' => $this->input->post('email'),
				'mobile' => $this->input->post('mobile'),
				'salt' => $salt,
				'passkey' => $password,
				'status' => $this->input->post('status'),
				'createdby' => $this->session->userdata('id'),
				'createdon' => date_timestamp_get(date_create()),
            );
			
            $params2 = array(
				'name' => $this->input->post('name'),
				'gender' => $this->input->post('gender'),
				'date_of_birth' => $this->input->post('date_of_birth'),
				'address' => $this->input->post('address'),
				'country_id' => $this->input->post('country_id'),
				'state_id' => $this->input->post('state_id'),
				'city_id' => $this->input->post('city_id'),
				'zipcode' => $this->input->post('zip_code'),
				
            );
			if(!empty($_FILES['profile_photo']))
			{
									$config['upload_path'] = 'uploads/profile/';
									$config['allowed_types'] = '*';
									$config['max_size'] = '0';
									$config['max_filename'] = '255';
									$config['encrypt_name'] = TRUE;
									$file = array();
									$is_file_error = FALSE;
									if (!$is_file_error) {
										$s =  $this->upload->initialize($config);
										if (!$this->upload->do_upload('profile_photo'))
										{
									      echo $this->upload->display_errors();
									      $is_file_error = TRUE;
						                }
									    else
										{
							               $file = $this->upload->data();
						                }
					            }	
							    if (!$is_file_error) {
							    
						
						
					}
							}

               
				if($this->Group_model->update_group($id,$params)){
			$this->session->set_flashdata('msg', '<div class="alert alert-success">record updated!</div>');            
                redirect('secure/group/index');
				}
            }
            else
            {
                
				$this->render_template('secure/users/edit', $data);
            }
        }
        else
            
			$this->session->set_flashdata('msg', '<div class="alert alert-danger">The group you are trying to edit does not exist.</div>');
    } 

    /*
     * Deleting group
     */
    function delete($id)
    {
        $group = $this->Group_model->get_group($id);
		$per = $this->check_permission();
		
		
		if($per=='Own'){
		if(!$group['group']['createdby']==$this->session->userdata('id')){
			echo '<script> alert("Access Denied! You do not have permission to access this page");</script>';
			echo '<script> window.history.back();</script>';
		}
		}
        // check if the group exists before trying to delete it
        if(isset($group['id']))
        {
            $this->Group_model->delete_group($id);
            redirect('secure/group/index');
        }
        else
            $this->session->set_flashdata('msg', '<div class="alert alert-danger">The group you are trying to delete does not exist.</div>');
    }
	
	function addstudent()
    {   
       // $this->check_permission();
		$params = array(
				'student_name' => $this->input->post('name'),
				'email' => $this->input->post('email'),
				'mobile1' => $this->input->post('mobile1'),
				'mobile2' => $this->input->post('mobile2'),
				'createdby' => $this->session->userdata('id'),
				'createdon' => date_timestamp_get(date_create()),
            );
			
		$this->load->library('form_validation');
		if($this->session->userdata('group_id')!='4' && $this->session->userdata('group_id')!='5'){
			$this->form_validation->set_rules('parent_id','Coordinator','required');
			$this->form_validation->set_rules('executive_id','Executive','required');
			
			if($this->input->post('executive_id') == '0'){
			$params['parent_id'] = $this->input->post('parent_id');
			}
			else{
			$params['parent_id'] = $this->input->post('executive_id');	
			}
			
			$data['coordinaterlist']		=	$this->Users_model->get_coordinaterlist();
		}
		elseif($this->session->userdata('group_id')=='4'){
			$data['executiveist']		=	$this->Users_model->get_excutivelist($this->session->userdata('id'));
			$this->form_validation->set_rules('executive_id','Executive','required');
			if($this->input->post('executive_id') == '0'){
			$params['parent_id'] = $this->session->userdata('id');
			}
			else{
			$params['parent_id'] = $this->input->post('executive_id');	
			}
		}
		else{
			$params['parent_id'] = $this->session->userdata('id');
		}
		$this->form_validation->set_rules('name','Student Name','required');
		$this->form_validation->set_rules('email','Email','valid_email');
		$this->form_validation->set_rules('mobile1','Primary Mobile','required|numeric|min_length[10]|max_length[10]');
		$this->form_validation->set_rules('mobile2','Secondary Mobile','numeric');
		
		//var_dump($_POST); exit;
		if($this->form_validation->run())     
        {   
			$getuser = $this->Users_model->get_data('tbl_users', array('id'=>$params['parent_id']));	
            $check_mobile1 = $this->Users_model->get_data('tbl_student', array('mobile_number'=>$params['mobile1']));
			$check_mobile2 = $this->Users_model->get_data('tbl_student', array('mobile_number'=>$params['mobile2']));
			//var_dump($getuser); 
			if($check_mobile1['id'] !=''){
				if($check_mobile1['parent_id'] == '0'){
					$examlist = $this->Users_model->get_all_list('tbl_student_exam', array('student_id'=>$check_mobile1['id']));
					foreach($examlist as $exam){
						//var_dump($exam);
						if($exam['payment_status'] =='1'){
							if($getuser['group_id'] == '4'){
								$coordinator_payment = round(((float)$exam['exam_fee'] * 20 /100), 2);
								$coordinator = array(
													'user_id'=>$getuser['id'],
													'group_id'=>4,
													'student_id'=>$check_mobile1['id'],
													'exam_id'=>$exam['id'],
													'exam_fee'=>$exam['exam_fee'],
													'total_commssion'=>$coordinator_payment,
													'current_commssion'=>$coordinator_payment,
													'deducate_commssion'=>0,
													'commssion'=>$coordinator_payment,
													'parent_id'=>0,
													'payment_status'=>0,
													'payment_id'=>0,
													'status'=>1,
													'createdby'=>$this->session->userdata('id'),
													'createdon'=>date_timestamp_get(date_create()),
												
													);
							$coordinator = $this->Users_model->add_users('tbl_member_payment', $coordinator);						
							}
							elseif($getuser['group_id'] == '5'){
								$totalcommission = round(((float)$exam['exam_fee'] * 20 /100), 2);
								if($totalcommission > $getuser['commission']){
									
									$coordinator_payment = $totalcommission - (float)$getuser['commission'];
									$executive_payment = (float)$getuser['commission'];
									
								}
								elseif($totalcommission <= $getuser['commission']){
									$coordinator_payment = 0;
									$executive_payment = $totalcommission;
								}
								$coordinator = array(
													'user_id'=>$getuser['parent_id'],
													'group_id'=>4,
													'student_id'=>$check_mobile1['id'],
													'exam_id'=>$exam['id'],
													'exam_fee'=>$exam['exam_fee'],
													'total_commssion'=>$totalcommission,
													'current_commssion'=>$totalcommission,
													'deducate_commssion'=>$executive_payment,
													'commssion'=>$coordinator_payment,
													'parent_id'=>$getuser['id'],
													'payment_status'=>0,
													'payment_id'=>0,
													'status'=>1,
													'createdby'=>$this->session->userdata('id'),
													'createdon'=>date_timestamp_get(date_create()),
													);
								$executive = array(
													'user_id'=>$getuser['id'],
													'group_id'=>5,
													'student_id'=>$check_mobile1['id'],
													'exam_id'=>$exam['id'],
													'exam_fee'=>$exam['exam_fee'],
													'total_commssion'=>$totalcommission,
													'current_commssion'=>(float)$getuser['commission'],
													'deducate_commssion'=>0,
													'commssion'=>$executive_payment,
													'parent_id'=>$getuser['parent_id'],
													'payment_status'=>0,
													'payment_id'=>0,
													'status'=>1,
													'createdby'=>$this->session->userdata('id'),
													'createdon'=>date_timestamp_get(date_create()),
													);
								$coordinator = $this->Users_model->add_users('tbl_member_payment', $coordinator);
								$executive = $this->Users_model->add_users('tbl_member_payment', $executive);
								///var_dump($totalcommission);
								
								
							}
							
							
						}
					}
					$updatestudent = $this->Users_model->update_users('tbl_student', $check_mobile1['id'], array('parent_id'=>$params['parent_id']));
					$params['student_id'] = $check_mobile1['id'];
					$student_referance = $this->Users_model->add_users('tbl_student_referance', $params);
				}
				else{
					$this->session->set_flashdata('msg', '<div class="alert alert-danger">Record Already Exist</div>');
            		redirect('secure/users/addstudent');
				}
					
			}
			elseif($check_mobile2['id'] !=''){
				if($check_mobile2['parent_id'] == '0'){
					$examlist = $this->Users_model->get_all_list('tbl_student_exam', array('student_id'=>$check_mobile2['id']));
					foreach($examlist as $exam){
						//var_dump($exam);
						if($exam['payment_status'] =='1'){
							if($getuser['group_id'] == '4'){
								$coordinator_payment = round(((float)$exam['exam_fee'] * 20 /100), 2);
								$coordinator = array(
													'user_id'=>$getuser['id'],
													'group_id'=>4,
													'student_id'=>$check_mobile2['id'],
													'exam_id'=>$exam['id'],
													'exam_fee'=>$exam['exam_fee'],
													'total_commssion'=>$coordinator_payment,
													'current_commssion'=>$coordinator_payment,
													'deducate_commssion'=>0,
													'commssion'=>$coordinator_payment,
													'parent_id'=>0,
													'payment_status'=>0,
													'payment_id'=>0,
													'status'=>1,
													'createdby'=>$this->session->userdata('id'),
													'createdon'=>date_timestamp_get(date_create()),
												
													);
							$coordinator = $this->Users_model->add_users('tbl_member_payment', $coordinator);						
							}
							elseif($getuser['group_id'] == '5'){
								$totalcommission = round(((float)$exam['exam_fee'] * 20 /100), 2);
								if($totalcommission > $getuser['commission']){
									
									$coordinator_payment = $totalcommission - (float)$getuser['commission'];
									$executive_payment = (float)$getuser['commission'];
									
								}
								elseif($totalcommission <= $getuser['commission']){
									$coordinator_payment = 0;
									$executive_payment = $totalcommission;
								}
								$coordinator = array(
													'user_id'=>$getuser['parent_id'],
													'group_id'=>4,
													'student_id'=>$check_mobile2['id'],
													'exam_id'=>$exam['id'],
													'exam_fee'=>$exam['exam_fee'],
													'total_commssion'=>$totalcommission,
													'current_commssion'=>$totalcommission,
													'deducate_commssion'=>$executive_payment,
													'commssion'=>$coordinator_payment,
													'parent_id'=>$getuser['id'],
													'payment_status'=>0,
													'payment_id'=>0,
													'status'=>1,
													'createdby'=>$this->session->userdata('id'),
													'createdon'=>date_timestamp_get(date_create()),
													);
								$executive = array(
													'user_id'=>$getuser['id'],
													'group_id'=>5,
													'student_id'=>$check_mobile2['id'],
													'exam_id'=>$exam['id'],
													'exam_fee'=>$exam['exam_fee'],
													'total_commssion'=>$totalcommission,
													'current_commssion'=>(float)$getuser['commission'],
													'deducate_commssion'=>0,
													'commssion'=>$executive_payment,
													'parent_id'=>$getuser['parent_id'],
													'payment_status'=>0,
													'payment_id'=>0,
													'status'=>1,
													'createdby'=>$this->session->userdata('id'),
													'createdon'=>date_timestamp_get(date_create()),
													);
								$coordinator = $this->Users_model->add_users('tbl_member_payment', $coordinator);
								$executive = $this->Users_model->add_users('tbl_member_payment', $executive);
								///var_dump($totalcommission);
								
								
							}
							
							
						}
					}
					$updatestudent = $this->Users_model->update_users('tbl_student', $check_mobile2['id'], array('parent_id'=>$params['parent_id']));
					$params['student_id'] = $check_mobile2['id'];
					$student_referance = $this->Users_model->add_users('tbl_student_referance', $params);
				}
				else{
					$this->session->set_flashdata('msg', '<div class="alert alert-danger">Record Already Exist</div>');
            		redirect('secure/users/addstudent');
				}
			}
			else{
				$student_referance = $this->Users_model->add_users('tbl_student_referance', $params);
			}
			
			if($student_referance){
			
			$this->session->set_flashdata('msg', '<div class="alert alert-success">record Added!</div>');
            redirect('secure/users/addstudent');
			}
        }
        else
        {            
            
			$this->render_template('secure/users/addstudent',$data);
        }
    }
    
	function getexcetiveList(){
		if($_POST['parent_id'] !=''){
			$getlist = $this->Users_model->get_excutivelist($_POST['parent_id']);
				if($getlist[0]['id'] !=''){
					echo '<option value="0">Self</option>';
					foreach($getlist as $row){
					echo '<option value="'.$row['id'].'">'.$row['name'].'</option>';
					}
				}
				else{
					echo '<option value="">No Data Found!</option>';
				}
		}
	}
	
	function AllStudentList()
    {
       /// $per = $this->check_permission();
		
		//var_dump($this->session->userdata('group_id'));
		//exit;
		$data['title'] = 'Student List';
		$data['studentList'] = $this->Users_model->get_all_list('tbl_student', array('group_id'=>6));
		
		
		//var_dump($data['studentList']); exit;
		
		$this->render_template('secure/users/all_student_list', $data);
    }
	function StudentList()
    {
       /// $per = $this->check_permission();
		
		//var_dump($this->session->userdata('group_id'));
		//exit;
		$data['title'] = 'Student List';
		$data['studentList'] = $this->Users_model->get_all_list('tbl_student_referance', array('parent_id'=>$this->session->userdata('id')));
		if($this->session->userdata('group_id') == '4'){
		$data['studentList'] = $this->Users_model->get_all_list('tbl_student_referance', array('parent_id'=>$this->session->userdata('id')));		
			}
			else{
        $data['userslist'] = $this->Users_model->get_all_userslist();
			}
		
		//var_dump($data['studentList']); exit;
		
		$this->render_template('secure/users/referance_student_list', $data);
    }
	
	
	
	function MyPaymentList()
    {
       /// $per = $this->check_permission();
		
		//var_dump($this->session->userdata('group_id'));
		//exit;
		$data['title'] = 'Student List';
		$data['PaymentList'] = $this->Users_model->get_all_list('tbl_member_payment', array('user_id'=>$this->session->userdata('id')));
		if($this->session->userdata('group_id') == '4'){
		$data['userslist'] = $this->Users_model->get_all_list('tbl_student_referance', array('parent_id'=>$this->session->userdata('id')));		
			}
			else{
        $data['userslist'] = $this->Users_model->get_all_userslist();
			}
		
		//var_dump($data['PaymentList']); exit;
		
		$this->render_template('secure/users/my_payment_list', $data);
    }
	
	public function GeneratePayment(){
		$data['title'] = 'Generate Payment';
		$data['memberList'] =  $this->Users_model->get_member_list();
		
		$this->form_validation->set_rules('user_id','Member','required');
		//var_dump($data['memberList']); exit;
		if($this->form_validation->run())     
        {
			
			$data['paymentList'] = $this->Users_model->get_all_list('tbl_member_payment', array('user_id'=>$_POST['user_id'],'payment_status'=>0));
			///var_dump($data['paymentList']); exit;
			$this->render_template('secure/users/payment_list', $data);
		}
		else{
		$this->render_template('secure/users/generate_payment', $data);
		}
	}
	
	public function makePayment(){
		/////var_dump($_POST); exit;
		if($this->input->post('grand_total') !='0' || $this->input->post('grand_total') !='0.00'){
			
			 $params = array(
			 				'user_id'=>$this->input->post('user_id'),
							'sub_total'=>$this->input->post('sub_total'),
							'bonus_head'=>$this->input->post('bonus_head'),
							'bonus_value'=>$this->input->post('bonus_value'),
							'fine_head'=>$this->input->post('fine_head'),
							'fine_value'=>$this->input->post('fine_value'),
							'total'=>$this->input->post('total'),
							'tds'=>$this->input->post('tds'),
							'grand_total'=>$this->input->post('grand_total'),
							'payment_status'=>0,
							'createdby'=>$this->session->userdata('id'),
							'createdon'=>date_timestamp_get(date_create()),
			 				);
				if($_POST['payment_id'][0] !=''){
				foreach($_POST['payment_id'] as $key=>$row){
					$rowdetail[] = $row.'-'.$_POST['examdetail'][$row];
				}
				$params['payment_ids'] = implode(',', $_POST['payment_id']);
				$params['payment_details'] = implode(',', $rowdetail);
				//////var_dump($rowdetail); exit;
			}			
				////var_dump($params); exit;
			$insert_id = $this->Users_model->insert_data('tbl_final_member_payment',$params);
			if($_POST['payment_id'][0] !=''){
				foreach($_POST['payment_id'] as $key=>$row){
					
					$this->Users_model->update_data('tbl_member_payment', array('id'=>$row), array('payment_status'=>1,'payment_id'=>$insert_id));
					
				}
			}
			if($insert_id){
				$this->session->set_flashdata('msg', '<div class="alert alert-success">Payment Generate Successfully</div>');
           		 redirect('secure/users/generatepayment');
			}
			else{
				$this->session->set_flashdata('msg', '<div class="alert alert-danger">Invalid Response!</div>');
           		 redirect('secure/users/generatepayment');
			}
		}
		else{
			$this->session->set_flashdata('msg', '<div class="alert alert-danger">Invalid Response! Grand Total Can not be zero</div>');
           		 redirect('secure/users/generatepayment');
		}
	}
	
	public function ExecutiveList(){
		$data['title'] = 'Executive List';
		$data['coordinaterList'] =  $this->Users_model->get_coordinaterlist();
		
		$this->form_validation->set_rules('user_id','Member','required');
		//var_dump($data['memberList']); exit;
		if($this->form_validation->run())     
        {
			
			$data['excutivelist'] = $this->Users_model->get_excutivelist($_POST['user_id']);
			///var_dump($data['paymentList']); exit;
			$this->render_template('secure/users/ExecutiveList', $data);
		}
		else{
		$this->render_template('secure/users/coordinatorList', $data);
		}
	}
	
	public function paymentList(){
			$data['title'] = 'Payment List';
			$data['PaymentList'] = $this->Users_model->get_all_list('tbl_final_member_payment', array('grand_total!='=>'')); 
			///var_dump($data); exit;
			$this->render_template('secure/users/PaymentList', $data);	
	}
}
